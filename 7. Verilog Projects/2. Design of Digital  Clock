
module digital_clock(clk_50,second,minute,hour);
 output reg [5:0] second, minute;
 output reg [4:0] hour;
 input clk_50;

 reg [24:0] count = 1;
 reg clk1 = 0;
 
always @(posedge clk_50)
 begin
  if(count == 25'd25000000)
  begin
   clk1 <= ~ clk1;
   count <= 25'd1;
  end
  else
  begin
   count <= count + 25'd1;
  end
 end
 
always @(posedge clk1)
 begin
  if (second == 6'd59)
  begin
   second <= 6'd0;
   if (minute == 6'd59)
   begin
    minute <= 6'd0;
    if (hour == 5'd23)
    begin
     hour <= 5'd0;
    end
    else
    begin
     hour <= hour + 5'd1;
    end
   end
   else
   begin
    minute <= minute + 6'd1;
   end
  end
  else
  begin
   second <= second + 6'd1;
  end
 end

endmodule

Testbench for Digital Clock:

module tb_clock;

    // Inputs
    reg Clk_1sec;
    reg reset;

    // Outputs
    wire [5:0] seconds;
    wire [5:0] minutes;
    wire [4:0] hours;

    // Instantiate the Unit Under Test (UUT)
    Digital_Clock uut (
        .Clk_1sec(Clk_1sec), 
        .reset(reset), 
        .seconds(seconds), 
        .minutes(minutes), 
        .hours(hours)
    );
    
    //Generating the Clock with `1 Hz frequency
    initial Clk_1sec = 0;
    always #50000000 Clk_1sec = ~Clk_1sec;  //Every 0.5 sec toggle the clock.

    initial begin
        reset = 1;
        // Wait 100 ns for global reset to finish
        #100;
        reset = 0;  
    end
      
endmodule
