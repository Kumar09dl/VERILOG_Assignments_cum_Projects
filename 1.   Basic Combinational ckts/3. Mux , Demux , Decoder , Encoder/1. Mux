                                                                 2 X 1 MUX : STRUCTURAL
                                                                 
         ------------DESIGN--------------
module mux_2X1_structural(x,s,y);
  input [1:0] x; input s;  output y;
  wire w1,w2,not_s;
  
  not G1(not_s,s);  
  and G2(w1,not_s,x[0]) , G3(w2,s,x[1]);
  or  G4(y,w1,w2);
  
endmodule
           ------------TESTBENCH--------------

module tb;  
  
  wire y; reg [1:0] x; reg s;   int i;
  
  mux_2X1_structural DUT(.x(x),.s(s),.y(y));
  
  
  initial
    begin    
          
    $dumpfile("dump.vcd");
    $dumpvars(1);
      x=2'd0; s=0;
         
      for(i=1;i<8;i=i+1)
      #10 {s,x}=i;     
 
    end
initial #90 $finish;  
endmodule

                                                2 X 1 MUX : DATAFLOW
                                                
         //------------DESIGN--------------

module mux_2X1_dataflow(x,s,y);
  input [1:0] x; input s;  output y;
  wire w1,w2;
  
  assign w1= (x[0]& ~s);   
  assign w2= (x[1]& s);                                        Lines 44,45,46 can be simply replaced with assign y=x[s];
  assign y= (w1 | w2);                                    
  
endmodule
TESTBENCH same as above


                                  2 X 1 MUX : BEHAVORIAL
                                    //------------DESIGN--------------

module mux_2X1_behavorial(x,s,y);
  
  input [1:0] x; input s;  output reg y;

  
  always @(x,s)
    begin
      case(s)        
        1'b0:y<=x[0];          
        1'b1:y<=x[1];
      endcase         
    end  
endmodule

